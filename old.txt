<script lang="ts">
	import ProductCard from '$lib/components/shop/ProductCard.svelte';
	import SubCategoryList from '$lib/components/shop/SubCategoryList.svelte';
	import Filter from '$lib/components/shop/Filter.svelte';
	import { each, getContext } from 'svelte/internal';
	import type { PageData } from './$types';
	import FilterChip from '$lib/components/shop/FilterChip.svelte';
	import type { Product, ProductDisplay } from '$lib/interfaces/shop';
	import type { Writable } from 'svelte/store';
	import type { CartItem } from '$lib/interfaces/cart';
	import type { CartStore } from '$lib/store/cart';
	import type { SubCategory } from '$lib/interfaces/category';

	export let data: PageData;
	const products: ProductDisplay[] = data.products;
	const subCategories = data?.subCategories as SubCategory[];

	let shoppingCart: CartStore = getContext('cart');

	// Selected filters
	let currentFilters: string[] = [];

	/**
	 * Add a filter to the current filters list
	 */
	function addFilter(event: CustomEvent<string>) {
		const specValue = event.detail;
		if (!currentFilters.includes(specValue)) {
			currentFilters = [...currentFilters, specValue];
		}
	}

	/**
	 * Remove a filter from the current filters list
	 */
	function removeFilter(event: CustomEvent<string>) {
		currentFilters = currentFilters.filter((value) => value !== event.detail);
	}

	/**
	 * Add a product to the cart
	 */
	async function addToCart(event: CustomEvent<CartItem>) {
		shoppingCart.addToCart(event.detail);
	}
</script>

<section class="flex flex-col py-2">
	<div class="flex items-center justify-between">
		<!-- Category and Subcategory -->
		<div class="flex flex-col">
			<h1
				class="block p-2 text-2xl font-semibold tracking-tight text-gray-900"
				aria-label="Category Name"
			>
				{data.categoryName}
			</h1>
			<!-- Subcategory List -->
			<SubCategoryList categoryName={data.categoryName} {subCategories} />
		</div>
		<!-- Filters and Sorting -->
		<div class="flex flex-col">
			<!-- Applied Filters -->
			<div class="min-h-10 flex p-2" aria-label="Applied Filters">
				{#each currentFilters as filter}
					<FilterChip chipName={filter} on:removeFilter={removeFilter} />
				{/each}
			</div>
			<!-- Filter Range, Filter Chips, and Sorting -->
			<div class="flex gap-4">
				<!-- Filter Range -->
				<div class="flex items-center" aria-label="Filter Range">
					<span class="mr-2">0</span>
					<input
						type="range"
						min="0"
						max="100"
						step="1"
						class="h-2 w-full appearance-none rounded-lg bg-gray-300 outline-none"
					/>
					<div class="flex">
						<span class="">100</span>
					</div>
				</div>
				<!-- Filter Chips -->
				<div>
					<Filter filters={data.specFilters} on:newFilter={addFilter} />
				</div>
				<!-- Sorting Dropdown -->
				<div class="mr-4">
					<label for="sortBy" class="sr-only">Sort</label>
					<select
						name="sortBy"
						id="sortBy"
						class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
						aria-label="Sort By"
					>
						<option>Sort</option>
					</select>
				</div>
			</div>
		</div>
	</div>
	<!-- Product Grid -->
	<div class="mt-5 grid grid-cols-4 p-2" aria-label="Product Grid">
		{#each products as product}
			<ProductCard
				productDisplay={product}
				categoryName={data.categoryName}
				subCategoryName={'all'}
				on:addToCart={addToCart}
			/>
		{/each}
	</div>
</section>


import type { ShopCategoryWithSub, SubCategory } from '$lib/interfaces/category';
import type { PageLoad } from './$types';

export const load = (async ({ parent, fetch, params }) => {
	const rawCategoryName = params.category;
	const rawSubCategoryName = params.subcategory;

	console.log(rawSubCategoryName);

	const categoryName = decodeURIComponent(rawCategoryName.replaceAll(/-/g, ' '));
	const subCategoryName = decodeURIComponent(rawSubCategoryName.replaceAll(/-/g, ' '));

	console.log(subCategoryName);

	const categories: ShopCategoryWithSub[] = (await parent()).categories;

	const category = categories.find((cat) => cat.name === categoryName);

	const categoryId = category?.id;
	let subCategoryId: number | null = null;

	if (category && subCategoryName !== 'all') {
		const subCategory = category.subCategories.find((subCat) => subCat.name === subCategoryName);
		console.log(subCategory);

		if (subCategory) {
			subCategoryId = subCategory.id;
		}
	}

	console.log(categoryId);
	console.log(subCategoryId);

	const response = await fetch('/api/product', {
		method: 'POST',
		body: JSON.stringify({ categoryId: categoryId, subCategoryId: subCategoryId }),
		headers: {
			'Content-Type': 'application/json'
		}
	});

	const products = await response.json();

	// const subCategories: ShopCategoryWithSub[] = (await parent()).categories.filter(function (
	// 	el: ShopCategoryWithSub
	// ) {
	// 	return categoryName.indexOf(el.name) >= 0;
	// });

	const specFiltersResponse = await fetch('/api/spec', {
		method: 'POST',
		body: JSON.stringify({ subCategoryId: 1 }),
		headers: {
			'content-type': 'application/json'
		}
	});

	const specFilters = await specFiltersResponse.json();

	// console.log(specFilters);

	return {
		products: products,
		categoryName: categoryName,
		subCategories: category?.subCategories,
		specFilters: specFilters
	};
}) satisfies PageLoad;






<script lang="ts">
	// Import statements
	import type { LayoutData } from './$types';
	import { setContext } from 'svelte';
	import Cart from '$lib/components/shop/Cart.svelte';
	import { writable } from 'svelte/store';
	import type { CartItem } from '$lib/interfaces/cart';
	import { createCartStore } from '$lib/store/cart';
	import type { ShopCategoryWithSub } from '$lib/interfaces/category';

	// Props
	export let data: LayoutData;

	// Data initialization
	const categories: ShopCategoryWithSub[] = data?.categories ?? [];
	const cartItems: CartItem[] = data?.cart ?? [];
	let showMenu = false; // Flag to control menu visibility
	const cart = createCartStore(); // Store for cart items

	$: cart.set(cartItems);
	let cartComponent: Cart; // Reference to the Cart component

	// Functions

	/**
	 * Toggles the visibility of the products menu
	 */
	function toggleMenu() {
		showMenu = !showMenu;
	}

	/**
	 * Toggles the visibility of the cart
	 */
	function toggleCart() {
		cartComponent.toggleCart();
	}

	// Set context
	setContext('cart', cart); // Sets the cart store in the Svelte context
</script>

<!-- Stylesheet -->
<link
	rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"
/>

<!-- Navigation Bar -->
<nav class="flex items-center justify-between bg-[#a0d8f1] px-6 py-4 dark:bg-gray-900">
	<!-- Logo and Menu -->
	<div class="flex items-center">
		<div class="text-xl font-bold text-gray-900 dark:text-white">
			<ul class="md:flow-row mt-4 flex flex-col font-medium md:mt-0 md:space-x-8">
				<li>
					<button
						type="button"
						class="flex w-full items-center justify-between border-b border-gray-100 py-2 pl-3 pr-4 font-medium text-gray-900 hover:bg-gray-50 dark:border-gray-700 dark:text-white dark:hover:bg-gray-700 dark:hover:text-blue-500 md:w-auto md:border-0 md:p-0 md:hover:bg-transparent md:hover:text-blue-600 md:dark:hover:bg-transparent md:dark:hover:text-blue-500"
						on:click={toggleMenu}
					>
						Products
						<svg
							aria-hidden="true"
							class="ml-1 h-5 w-5"
							fill="currentColor"
							viewBox="0 0 20 20"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								fill-rule="evenodd"
								d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
								clip-rule="evenodd"
							/>
						</svg>
					</button>
					<div
						class="absolute z-10 {showMenu === false
							? 'hidden'
							: 'grid'} w-11/12 grid-cols-1 justify-evenly rounded-lg bg-white text-sm shadow-sm transition-all duration-200 dark:bg-gray-700 md:grid-cols-6 lg:grid-cols-8"
					>
						{#each categories as category (category.id)}
							<div class="p-4 pb-0 font-body text-gray-700 dark:text-white md:pb-4">
								<ul class="space-y-6" aria-labelledby="mega-menu-icons-dropdown-button">
									<li>
										<a
											href="/shop/{encodeURIComponent(category.name.replace(/\s+/g, '-'))}/all"
											class="group flex items-center font-heading text-lg text-gray-700 transition-colors duration-200 hover:text-[#a0d8f1] dark:text-gray-400 dark:hover:text-blue-500"
											on:click={toggleMenu}
										>
											<span class="sr-only">{category.name}</span>
											{category.name}
										</a>
										<ul class="ml-2 mt-2 space-y-3">
											{#each category.subCategories as sub (sub.id)}
												<li>
													<a
														href="/shop/{encodeURIComponent(
															category.name.replace(/\s+/g, '-')
														)}/{encodeURIComponent(sub.name).replace(/\s+/g, '-')}"
														class="group flex items-center font-sans text-sm text-gray-600 transition-colors duration-200 hover:text-[#a0d8f1] dark:text-gray-400 dark:hover:text-blue-500"
														on:click={toggleMenu}
													>
														<span class="sr-only">{sub.name}</span>
														{sub.name}
													</a>
												</li>
											{/each}
										</ul>
									</li>
								</ul>
							</div>
						{/each}
					</div>
				</li>
			</ul>
		</div>
	</div>

	<!-- Search and Cart -->
	<div class="flex items-center space-x-4">
		<div class="relative">
			<span class="absolute inset-y-0 left-0 flex items-center pl-3">
				<svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
					<path
						fill-rule="evenodd"
						d="M12.657 14.95l4.95 4.95-1.414 1.414-4.95-4.95A7.5 7.5 0 1112.657 14.95zm-4.157-7.7a5 5 0 110 7.072A5 5 0 018.5 6.5z"
						clip-rule="evenodd"
					/>
				</svg>
			</span>
			<input
				type="text"
				placeholder="Search"
				class="rounded-lg border-gray-300 px-4 py-2 pl-10 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white dark:focus:border-blue-900 dark:focus:ring-blue-900"
			/>
		</div>
		<div>
			<button
				class="relative flex items-center text-gray-700 transition-colors duration-300 hover:text-gray-600 focus:outline-none dark:text-gray-200 dark:hover:text-gray-300"
				on:click={toggleCart}
			>
				<svg
					class="mr-2 h-5 w-5 text-gray-700 dark:text-gray-200"
					viewBox="0 0 24 24"
					fill="none"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.70711 15.2929C4.07714 15.9229 4.52331 17 5.41421 17H17M17 17C15.8954 17 15 17.8954 15 19C15 20.1046 15.8954 21 17 21C18.1046 21 19 20.1046 19 19C19 17.8954 18.1046 17 17 17ZM9 19C9 20.1046 8.10457 21 7 21C5.89543 21 5 20.1046 5 19C5 17.8954 5.89543 17 7 17C8.10457 17 9 17.8954 9 19Z"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
					/>
				</svg>
				<span class="text-sm text-gray-900 dark:text-white">Cart</span>
				<span class="absolute left-0 top-0 rounded-full bg-blue-500 p-1 text-xs text-white" />
			</button>
			<Cart bind:this={cartComponent} />
		</div>
	</div>
</nav>

<!-- Slot -->
<slot />
